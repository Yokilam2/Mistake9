Random Python Program Generator
This page is powered by pyfuzz, a program generator I have written to test the JIT compiler of Unladen Swallow.

Reload to generate another program!

def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var26 = func4(arg2, var6)
    var43 = func6(arg2, var6)
    var44 = func9()
    var45 = 434 - arg2
    var46 = var43 | arg2 - var44 + var45 ^ var26 - ((234 | arg2) & arg2 & arg2 ^ -503604713 + (1811017423 & var6 + (var43 | arg1 - arg2 - var44) & var45 | var44 | var43 + arg1)) & var45 + 734115418
    var47 = -920 | (var44 | ((-132 - (((var44 - (var45 | -607 - (arg2 - (((arg1 & arg2) ^ var43) | var6 | arg2) | var26 + arg2)) & var43) ^ -885 | 318) + var43) & var45 | -1167490631 ^ var45) + -1362943553))
    result = var45 + (var45 & arg1) & var45 ^ var44
    return result
def func9():
    func7()
    result = len(xrange(40))
    func8()
    return result
def func8():
    global len
    del len
def func7():
    global len
    len = lambda x : -2
def func6(arg27, arg28):
    var29 = arg27 ^ (arg28 | arg28)
    var30 = -1252730191 | (var29 ^ var29 ^ var29)
    var31 = 675746589 ^ (var29 ^ (-851 ^ var30))
    var32 = -849 | arg28 - -2063902665 - -53200467
    var33 = (-22 - arg27) + arg28 - var29
    if var31 < var33:
        var34 = arg28 - ((var30 ^ -442) | var32)
    else:
        var34 = arg27 ^ var29
    var35 = (var30 + (var31 + var31)) + arg27
    var36 = ((var33 & arg27) - 1196122088) | arg28
    var37 = -522 - (var32 | var33) + var36
    var38 = arg27 & var32
    var39 = arg28 ^ var33 - var31 & arg28
    var40 = var32 & var35 + (arg27 ^ var38)
    var41 = var33 - (var30 ^ var36)
    var42 = var36 + var36 | var39 & var29
    result = ((var29 ^ arg27) ^ var31 | var39) ^ (var39 | 999 + var29 + arg28 & arg28 - var33 & arg28 - var35)
    return result
def func4(arg7, arg8):
    var13 = func5(arg7, arg8)
    var14 = (var13 & -189) & -2104639856 | var13
    var15 = arg7 ^ (526 & 1671793510 + arg7)
    var16 = (-253 + (var14 + -569314939)) & arg7
    var17 = (var13 + var16 & var13) | var13
    var18 = arg8 - (arg7 - 206) - var13
    var19 = var15 + arg7
    if var17 < var18:
        var20 = var16 - var18 - arg8
    else:
        var20 = (-917478000 - (var17 | -395)) | var13
    var21 = var17 + var14 + (var13 + arg8)
    var22 = (arg8 + (-811 ^ arg8)) ^ var14
    var23 = var14 | var16 | arg8
    var24 = var16 ^ var17 + arg8
    var25 = arg7 + var16
    result = var16 & (var24 - var13) | (var15 + var16 ^ var23) | -801
    return result
def func5(arg9, arg10):
    var11 = 0
    for var12 in range(23):
        var11 += var12 | arg9
    return var11
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = (4 - -8) - 0
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 10'
    print 'arg_number: 48'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
